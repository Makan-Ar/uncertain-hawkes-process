18.8, 18.8, 18.9, 21.7, 21.9, 22.8, 24.2, 25.8, 30.6, 36.2,
39.8, 44.3, 46.8, 46.8, 58.1, 62.3, 70.6, 71.1, 71.3, 83.2,
83.6, 99.5, 111.2)
y = c(.971, .979, .982, .971, .957, .961, .965, .972, .889, .961,
.982, .975, .942, .932, .908, .970, .985, .933, .858, .987,
.958, .909, .859, .863, .811, .877, .798, .855, .788, .821,
.830, .718, .642, .658)
data = data.frame("X"=x, "Y"=y)
plot(x, y)
# sum of Xs
sum(data$X)
# sum of Ys
sum(data$Y)
# sum of X squared
sum(data$X ** 2)
# sum of Y squared
sum(data$Y ** 2)
# sum of XY
sum(data$X * data$Y)
linear.model = lm(Y ~ X, data = data)
plot(x, y)
abline(linear.model)
# residuals
round(summary(linear.model)$residuals, 3)
# residuals summation
sum(summary(linear.model)$residuals)
plot(resid(linear.model))
abline(h=0)
anova(linear.model)
# standard errors
summary(linear.model)$coef[1:2, 2]
# standard error of y hat
sigma(linear.model)
# 95% confidence band
confint(linear.model, level=0.95)
summary(linear.model)
x = c(13.3, 16.9, 19.9, 23.2, 26.3, 30.1, 42.6)
y = c(3.5, 5.1, 4.8, 6.7, 6.0, 9.5, 8.1)
data = data.frame("X"=x, "Y"=y)
linear.model = lm(Y ~ X, data = data)
# residual variance from ANOVA
anova(linear.model)[2, 3]
predict(linear.model, newdata=data.frame(X=c(0, 100)), level=0.95, interval='confidence')
x = c(40, 50, 60, 70, 80, 90, 40, 60, 80, 50)
y = c(69, 175, 272, 335, 490, 415, 72, 265, 492, 180)
data = data.frame("X"=x, "Y"=y)
linear.model = lm(Y ~ X, data = data)
# here are the residuals
round(resid(linear.model), 3)
plot(resid(linear.model))
abline(h=0)
# sum of residuals
round(sum(resid(linear.model)), 10)
batch.no = 1:9
t = c(280, 250, 300, 320, 310, 280, 320, 300, 320)
y = c(2.1, 3.0, 3.2, 1.4, 2.6, 3.9, 1.3, 3.4, 2.8)
data = data.frame("batch.no"=batch.no, "temp"=t, "Y"=y)
linear.model = lm(Y ~ temp, data = data)
plot(resid(linear.model))
abline(h=0)
# sum of residuals
round(sum(resid(linear.model)), 10)
summary(linear.model)
# std-err of b1
summary(linear.model)$coef[2,2]
# 95% confidence interval of b1
confint(linear.model, level=0.95)[2,]
# fitted values of all batches
predict(linear.model, newdata=data.frame(X=data$temp))
# fitted values of all batches
predict(linear.model, newdata=data.frame(temp=data$temp))
# fitted values of all batches
predict(linear.model, newdata=data.frame(temp=data$temp))
# residuals of all batches
data$temp - predict(linear.model, newdata=data.frame(temp=data$temp))
# fitted values of all batches
predict(linear.model, newdata=data.frame(temp=data$temp))
# residuals of all batches
data$temp - predict(linear.model, newdata=data.frame(temp=data$temp))
resid(linear.model)
# fitted values of all batches
predict(linear.model, newdata=data)
# residuals of all batches
data$temp - predict(linear.model, newdata=data.frame(temp=data$temp))
resid(linear.model)
# fitted values of all batches
predict(linear.model, newdata=data.frame(temp=data$temp))
# residuals of all batches
data$temp - predict(linear.model, newdata=data.frame(temp=data$temp))
resid(linear.model)
# fitted values of all batches
predict(linear.model, newdata=data.frame(temp=data$temp))
# residuals of all batches
data$temp
resid(linear.model)
# fitted values of all batches
predict(linear.model, newdata=data.frame(temp=data$temp))
# residuals of all batches
data$Y - predict(linear.model, newdata=data.frame(temp=data$temp))
resid(linear.model)
predict(linear.model, newdata=data.frame(temp=315), level=0.95, interval='confidence')
predict(linear.model, newdata=data.frame(temp=360), level=0.95, interval='confidence')
predict(linear.model, newdata=data.frame(temp=360), level=0.95, interval='confidence')
predict(linear.model, newdata=data.frame(temp=360))
# standard error of y hat
sigma(linear.model)
predict(linear.model, newdata = data)
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
(data$Y - predict(linear.model, newdata = data)) ** 2
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
sqrt(sum((data$Y - predict(linear.model, newdata = data)) ** 2) / length(data$Y))
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
summary(linear.model)
sqrt(sum((data$Y - predict(linear.model, newdata = data)) ** 2) / length(data$Y))
# 95% confidence band
confint(linear.model, level=0.95)
x = c(3.0, 4.7, 8.3, 9.3, 9.9, 11.0, 12.3, 12.5, 12.6, 15.9, 16.7,
18.8, 18.8, 18.9, 21.7, 21.9, 22.8, 24.2, 25.8, 30.6, 36.2,
39.8, 44.3, 46.8, 46.8, 58.1, 62.3, 70.6, 71.1, 71.3, 83.2,
83.6, 99.5, 111.2)
y = c(.971, .979, .982, .971, .957, .961, .965, .972, .889, .961,
.982, .975, .942, .932, .908, .970, .985, .933, .858, .987,
.958, .909, .859, .863, .811, .877, .798, .855, .788, .821,
.830, .718, .642, .658)
data = data.frame("X"=x, "Y"=y)
plot(x, y)
# sum of Xs
sum(data$X)
# sum of Ys
sum(data$Y)
# sum of X squared
sum(data$X ** 2)
# sum of Y squared
sum(data$Y ** 2)
# sum of XY
sum(data$X * data$Y)
linear.model = lm(Y ~ X, data = data)
plot(x, y)
abline(linear.model)
# residuals
round(summary(linear.model)$residuals, 3)
# residuals summation
sum(summary(linear.model)$residuals)
plot(resid(linear.model))
abline(h=0)
anova(linear.model)
# standard errors
summary(linear.model)$coef[1:2, 2]
# standard error of y hat
sigma(linear.model)
summary(linear.model)
sqrt(sum((data$Y - predict(linear.model, newdata = data)) ** 2) / length(data$Y))
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
abline(linear.model)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y)
abline(linear.model)
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y)
abline(linear.model)
# 95% confidence band
abline(confint(linear.model, level=0.95))
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y)
abline(linear.model)
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1])
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1])
abline(confint(linear.model, level=0.95)[,2])
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
x = c(3.0, 4.7, 8.3, 9.3, 9.9, 11.0, 12.3, 12.5, 12.6, 15.9, 16.7,
18.8, 18.8, 18.9, 21.7, 21.9, 22.8, 24.2, 25.8, 30.6, 36.2,
39.8, 44.3, 46.8, 46.8, 58.1, 62.3, 70.6, 71.1, 71.3, 83.2,
83.6, 99.5, 111.2)
y = c(.971, .979, .982, .971, .957, .961, .965, .972, .889, .961,
.982, .975, .942, .932, .908, .970, .985, .933, .858, .987,
.958, .909, .859, .863, .811, .877, .798, .855, .788, .821,
.830, .718, .642, .658)
data = data.frame("X"=x, "Y"=y)
plot(x, y)
# sum of Xs
sum(data$X)
# sum of Ys
sum(data$Y)
# sum of X squared
sum(data$X ** 2)
# sum of Y squared
sum(data$Y ** 2)
# sum of XY
sum(data$X * data$Y)
linear.model = lm(Y ~ X, data = data)
plot(x, y)
abline(linear.model)
# residuals
round(summary(linear.model)$residuals, 3)
# residuals summation
sum(summary(linear.model)$residuals)
plot(resid(linear.model))
abline(h=0)
anova(linear.model)
# standard errors
summary(linear.model)$coef[1:2, 2]
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
predict(linear.model, newdata=data.frame(data), level=0.95, interval='confidence')
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
predict(linear.model, newdata=data.frame(data), level=0.95, interval='confidence')[,1]
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
plot(data$Y, predict(linear.model, newdata=data.frame(data), level=0.95, interval='confidence')[,1])
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
plot(predict(linear.model, newdata=data.frame(data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(predict(linear.model, newdata=data.frame(data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(predict(linear.model, newdata=data.frame(X=data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(predict(linear.model, newdata=data.frame(X=data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
c(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(predict(linear.model, newdata=data.frame(X=data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
to.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(predict(linear.model, newdata=data.frame(X=data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(predict(linear.model, newdata=data.frame(X=data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]$values
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(predict(linear.model, newdata=data.frame(X=data), level=0.95, interval='confidence')[,1], data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
x = c(3.0, 4.7, 8.3, 9.3, 9.9, 11.0, 12.3, 12.5, 12.6, 15.9, 16.7,
18.8, 18.8, 18.9, 21.7, 21.9, 22.8, 24.2, 25.8, 30.6, 36.2,
39.8, 44.3, 46.8, 46.8, 58.1, 62.3, 70.6, 71.1, 71.3, 83.2,
83.6, 99.5, 111.2)
y = c(.971, .979, .982, .971, .957, .961, .965, .972, .889, .961,
.982, .975, .942, .932, .908, .970, .985, .933, .858, .987,
.958, .909, .859, .863, .811, .877, .798, .855, .788, .821,
.830, .718, .642, .658)
data = data.frame("X"=x, "Y"=y)
plot(x, y)
# sum of Xs
sum(data$X)
# sum of Ys
sum(data$Y)
# sum of X squared
sum(data$X ** 2)
# sum of Y squared
sum(data$Y ** 2)
# sum of XY
sum(data$X * data$Y)
linear.model = lm(Y ~ X, data = data)
plot(x, y)
abline(linear.model)
# residuals
round(summary(linear.model)$residuals, 3)
# residuals summation
sum(summary(linear.model)$residuals)
plot(resid(linear.model))
abline(h=0)
anova(linear.model)
# standard errors
summary(linear.model)$coef[1:2, 2]
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
data$Y
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
# points(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
plot(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
data$Y
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(data$X, as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]))
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
plot(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
data$Y
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(data$X, as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,2]), col='red')
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="red")
abline(confint(linear.model, level=0.95)[,2], col="red")
plot(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
data$Y
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(data$X, as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,2]), col='blue')
points(data$X, as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,3]), col='red')
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="blue")
abline(confint(linear.model, level=0.95)[,2], col="red")
plot(as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1]), data$Y)
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
data$Y
# standard error of y hat
sigma(linear.model)
plot(data$X, data$Y, main = "95% Band Over the Intercept and Beta 1")
points(data$X, as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,2]), col='blue')
points(data$X, as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,3]), col='red')
abline(linear.model)
abline(confint(linear.model, level=0.95)[,1], col="blue")
abline(confint(linear.model, level=0.95)[,2], col="red")
# 95% confidence band
confint(linear.model, level=0.95)
as.vector(predict(linear.model, newdata=data.frame(X=data$X), level=0.95, interval='confidence')[,1])
data$Y
install.packages("hawkes")
load('hawkes')
load('hawkes')
load('hawkes')
library("hawkes", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
simulateHawkes(0.5, 0.9, 2, 1000)
setwd("~/Documents/Projects/uncertain-hawkes-process/R")
a  = simulateHawkes(0.5, 0.9, 2, 1000)
write.csv(a[[1]], file = "../practive/data/hsim.csv")
a  = simulateHawkes(0.5, 0.9, 2, 1000)
write.csv(a[[1]], file = "../practice/data/hsim.csv")
a  = simulateHawkes(0.5, 0.9, 2, 1000)
write.csv(a[[1]], file = "../practice/data/hsim.csv")
a  = simulateHawkes(0.5, 0.9, 2, 1000)
write.csv(a[[1]], file = "../practice/data/hsim.csv")
a[[1]]
a  = simulateHawkes(0.5, 0.9, 2, 1000)
write.csv(a[[1]], file = "../practice/data/hsim.csv", row.names=FALSE)
a  = simulateHawkes(0.5, 0.9, 10, 1000)
write.csv(a[[1]], file = "../practice/data/hsim.csv", row.names=FALSE)
a  = simulateHawkes(0.5, 0.9, 10, 1000)
write.csv(a[[1]], file = "../practice/hsim.csv", row.names=FALSE)
a  = simulateHawkes(0.5, 0.9, 10, 10000)
write.csv(a[[1]], file = "../practice/hsim.csv", row.names=FALSE)
a  = simulateHawkes(0.5, 0.9, 2, 10000)
write.csv(a[[1]], file = "../practice/hsim.csv", row.names=FALSE)
a  = simulateHawkes(0.5, 0.9, 2, 10000)
write.csv(a[[1]], file = "../practice/hsim.csv", row.names=FALSE)
likelihoodHawkes(0.5, 0.9, 2, a[[1]])
